import os
import pandas as pd
import tempfile
from datetime import datetime

class ReportGenerator:
    def __init__(self):
        pass
    
    def generate_report(self, report_data, report_format='pdf'):
        preview_text = self._generate_preview(report_data)
        
        if report_format == 'html':
            report_file = self._generate_html_report(report_data)
        else:  # Default to PDF
            report_file = self._generate_pdf_report(report_data)
            
        return report_file, preview_text
    
    def _generate_preview(self, report_data):
        preview = f"--- REPORT PREVIEW ---\n\n"
        preview += f"Title: {report_data['title']}\n"
        preview += f"Generated: {report_data['timestamp']}\n\n"
        
        if report_data.get('query'):
            preview += f"Query: {report_data['query']}\n\n"
            
        if report_data.get('summary'):
            preview += "--- SUMMARY ---\n"
            summary = report_data['summary']
            preview += f"Total Logs: {summary.get('total_logs', 'N/A')}\n"
            if 'earliest_log' in summary:
                preview += f"Time Range: {summary['earliest_log']} to {summary['latest_log']}\n"
            if 'log_type_distribution' in summary:
                preview += "Log Type Distribution:\n"
                for log_type, count in summary['log_type_distribution'].items():
                    preview += f"- {log_type}: {count}\n"
            preview += "\n"
            
        if report_data.get('results') is not None:
            preview += "--- RESULTS ---\n"
            results_df = report_data['results']
            preview += f"Total records: {len(results_df)}\n"
            preview += "First 5 records:\n"
            preview += results_df.head().to_string() + "\n\n"
            
        if report_data.get('visualization'):
            preview += "--- VISUALIZATION ---\n"
            preview += f"Type: {report_data['visualization']['type']}\n"
            preview += "[Visualization included in exported report]\n\n"
            
        preview += "--- END OF PREVIEW ---\n"
        return preview
    
    def _generate_html_report(self, report_data):
        fd, report_file = tempfile.mkstemp(suffix='.html')
        os.close(fd)
        
        html = f"""
        <!DOCTYPE html>
        <html>
        <head>
            <title>{report_data['title']}</title>
            <style>
                body {{ font-family: Arial, sans-serif; margin: 20px; }}
                h1, h2 {{ color: #2c3e50; }}
                table {{ border-collapse: collapse; width: 100%; }}
                th, td {{ border: 1px solid #ddd; padding: 8px; text-align: left; }}
                th {{ background-color: #f2f2f2; }}
                tr:nth-child(even) {{ background-color: #f9f9f9; }}
                .summary {{ background-color: #eef6f9; padding: 15px; border-radius: 5px; }}
                .footer {{ margin-top: 30px; font-size: 0.8em; color: #7f8c8d; }}
            </style>
        </head>
        <body>
            <h1>{report_data['title']}</h1>
            <p>Generated: {report_data['timestamp']}</p>
        """
        
        if report_data.get('query'):
            html += f"<h2>Query</h2><p>{report_data['query']}</p>"
        
        if report_data.get('summary'):
            html += "<h2>Summary</h2><div class='summary'>"
            summary = report_data['summary']
            html += f"<p><strong>Total Logs:</strong> {summary.get('total_logs', 'N/A')}</p>"
            if 'earliest_log' in summary and 'latest_log' in summary:
                html += f"<p><strong>Time Range:</strong> {summary['earliest_log']} to {summary['latest_log']}</p>"
            if 'log_type_distribution' in summary:
                html += "<p><strong>Log Type Distribution:</strong></p><ul>"
                for log_type, count in summary['log_type_distribution'].items():
                    html += f"<li>{log_type}: {count}</li>"
                html += "</ul>"
            html += "</div>"
        
        if report_data.get('visualization'):
            html += "<h2>Visualization</h2>"
            viz_path = report_data['visualization']['path']
            with open(viz_path, 'rb') as img_file:
                import base64
                img_data = base64.b64encode(img_file.read()).decode()
                html += f"<img src='data:image/png;base64,{img_data}' alt='Visualization' style='max-width:100%'>"
        
        if report_data.get('results') is not None:
            html += "<h2>Results</h2>"
            results_df = report_data['results']
            html += results_df.head(100).to_html()
            if len(results_df) > 100:
                html += f"<p><em>Showing 100 of {len(results_df)} results</em></p>"
        
        html += """
            <div class='footer'>
                <p>Generated by EONParser - Log Analysis Tool</p>
            </div>
        </body>
        </html>
        """
        
        with open(report_file, 'w', encoding='utf-8') as f:
            f.write(html)
        
        return report_file
    
    def _generate_pdf_report(self, report_data):
        fd, report_file = tempfile.mkstemp(suffix='.pdf')
        os.close(fd)
        
        with open(report_file, 'w', encoding='utf-8') as f:
            f.write(f"Title: {report_data['title']}\n")
            f.write(f"Generated: {report_data['timestamp']}\n\n")
            if report_data.get('query'):
                f.write(f"Query: {report_data['query']}\n\n")
            if report_data.get('summary'):
                f.write("--- SUMMARY ---\n")
                summary = report_data['summary']
                f.write(f"Total Logs: {summary.get('total_logs', 'N/A')}\n")
                if 'earliest_log' in summary:
                    f.write(f"Time Range: {summary['earliest_log']} to {summary['latest_log']}\n")
                if 'log_type_distribution' in summary:
                    f.write("Log Type Distribution:\n")
                    for log_type, count in summary['log_type_distribution'].items():
                        f.write(f"- {log_type}: {count}\n")
                f.write("\n")
            if report_data.get('results') is not None:
                f.write("--- RESULTS ---\n")
                results_df = report_data['results']
                f.write(f"Total records: {len(results_df)}\n")
                f.write("First 10 records:\n")
                f.write(results_df.head(10).to_string() + "\n\n")
            if report_data.get('visualization'):
                f.write("--- VISUALIZATION ---\n")
                f.write(f"Type: {report_data['visualization']['type']}\n")
                f.write("[Visualization included in the actual PDF report]\n\n")
            f.write("--- END OF REPORT ---\n")
        
        return report_file